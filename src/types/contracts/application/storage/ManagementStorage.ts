/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ManagementStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getAuthorizationTokenContracts"
      | "getParticipantName"
      | "getParticipantWalletToAuthorizationToken"
      | "getParticipantWalletToSettlementToken"
      | "setParticipantWalletMapping"
      | "setParticipantWalletToAuthorizationToken"
      | "setParticipantWalletToSettlementToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getAuthorizationTokenContracts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantWalletToAuthorizationToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantWalletToSettlementToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipantWalletMapping",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipantWalletToAuthorizationToken",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setParticipantWalletToSettlementToken",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAuthorizationTokenContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantWalletToAuthorizationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantWalletToSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipantWalletMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipantWalletToAuthorizationToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParticipantWalletToSettlementToken",
    data: BytesLike
  ): Result;
}

export interface ManagementStorage extends BaseContract {
  connect(runner?: ContractRunner | null): ManagementStorage;
  waitForDeployment(): Promise<this>;

  interface: ManagementStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getAuthorizationTokenContracts: TypedContractMethod<[], [string[]], "view">;

  getParticipantName: TypedContractMethod<
    [participantWallet: AddressLike],
    [string],
    "view"
  >;

  getParticipantWalletToAuthorizationToken: TypedContractMethod<
    [participantWallet: AddressLike],
    [string],
    "view"
  >;

  getParticipantWalletToSettlementToken: TypedContractMethod<
    [participantWallet: AddressLike],
    [string],
    "view"
  >;

  setParticipantWalletMapping: TypedContractMethod<
    [participantWallet: AddressLike, participantName: string],
    [void],
    "nonpayable"
  >;

  setParticipantWalletToAuthorizationToken: TypedContractMethod<
    [participantWallet: AddressLike, authorizationTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setParticipantWalletToSettlementToken: TypedContractMethod<
    [participantWallet: AddressLike, settlementTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getAuthorizationTokenContracts"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getParticipantName"
  ): TypedContractMethod<[participantWallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getParticipantWalletToAuthorizationToken"
  ): TypedContractMethod<[participantWallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getParticipantWalletToSettlementToken"
  ): TypedContractMethod<[participantWallet: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setParticipantWalletMapping"
  ): TypedContractMethod<
    [participantWallet: AddressLike, participantName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParticipantWalletToAuthorizationToken"
  ): TypedContractMethod<
    [participantWallet: AddressLike, authorizationTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setParticipantWalletToSettlementToken"
  ): TypedContractMethod<
    [participantWallet: AddressLike, settlementTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
