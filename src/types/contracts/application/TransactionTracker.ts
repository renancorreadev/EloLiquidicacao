/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface TransactionTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "authorizationTrackerMapping"
      | "getAuthorizationInfo"
      | "getSettlementInfo"
      | "getTransactionInfo"
      | "getTransactionsByParticipant"
      | "getTransactionsByStatus"
      | "registerAuthorizationTracker"
      | "registerSettlementToken"
      | "registerTransaction"
      | "settlementTrackerMapping"
      | "transactionsMapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "authorizationTrackerMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorizationInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAuthorizationTracker",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSettlementToken",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTransaction",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settlementTrackerMapping",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsMapping",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "authorizationTrackerMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorizationInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAuthorizationTracker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSettlementToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settlementTrackerMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsMapping",
    data: BytesLike
  ): Result;
}

export interface TransactionTracker extends BaseContract {
  connect(runner?: ContractRunner | null): TransactionTracker;
  waitForDeployment(): Promise<this>;

  interface: TransactionTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  authorizationTrackerMapping: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        participantWallet: string;
        participantType: string;
        pan: bigint;
        mcc: bigint;
        authorizedAt: bigint;
        productBin: bigint;
        saleValue: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  getAuthorizationInfo: TypedContractMethod<
    [nrid: BigNumberish],
    [string],
    "view"
  >;

  getSettlementInfo: TypedContractMethod<
    [nrid: BigNumberish],
    [string],
    "view"
  >;

  getTransactionInfo: TypedContractMethod<
    [nrid: BigNumberish],
    [string],
    "view"
  >;

  getTransactionsByParticipant: TypedContractMethod<
    [participantWallet: AddressLike],
    [string[]],
    "view"
  >;

  getTransactionsByStatus: TypedContractMethod<
    [status: BigNumberish],
    [string[]],
    "view"
  >;

  registerAuthorizationTracker: TypedContractMethod<
    [
      nrid: BigNumberish,
      participantWallet: AddressLike,
      pan: BigNumberish,
      mcc: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerSettlementToken: TypedContractMethod<
    [nrid: BigNumberish, participantWallet: AddressLike],
    [void],
    "nonpayable"
  >;

  registerTransaction: TypedContractMethod<
    [
      nrid: BigNumberish,
      participantWallet: AddressLike,
      pan: BigNumberish,
      mcc: BigNumberish,
      authorizedAt: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish,
      status: BigNumberish,
      participantType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  settlementTrackerMapping: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        participantWallet: string;
        participantType: string;
        msgResponse: string;
        codeResponse: string;
        settledAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;

  transactionsMapping: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        nrid: bigint;
        participantWallet: string;
        pan: bigint;
        mcc: bigint;
        authorizedAt: bigint;
        settledAt: bigint;
        paymentGeneratedAt: bigint;
        productBin: bigint;
        saleValue: bigint;
        status: bigint;
        participantType: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "authorizationTrackerMapping"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, bigint, bigint, bigint, bigint, bigint] & {
        participantWallet: string;
        participantType: string;
        pan: bigint;
        mcc: bigint;
        authorizedAt: bigint;
        productBin: bigint;
        saleValue: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAuthorizationInfo"
  ): TypedContractMethod<[nrid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getSettlementInfo"
  ): TypedContractMethod<[nrid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTransactionInfo"
  ): TypedContractMethod<[nrid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByParticipant"
  ): TypedContractMethod<[participantWallet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByStatus"
  ): TypedContractMethod<[status: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "registerAuthorizationTracker"
  ): TypedContractMethod<
    [
      nrid: BigNumberish,
      participantWallet: AddressLike,
      pan: BigNumberish,
      mcc: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerSettlementToken"
  ): TypedContractMethod<
    [nrid: BigNumberish, participantWallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerTransaction"
  ): TypedContractMethod<
    [
      nrid: BigNumberish,
      participantWallet: AddressLike,
      pan: BigNumberish,
      mcc: BigNumberish,
      authorizedAt: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish,
      status: BigNumberish,
      participantType: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settlementTrackerMapping"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, bigint, bigint] & {
        participantWallet: string;
        participantType: string;
        msgResponse: string;
        codeResponse: string;
        settledAt: bigint;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "transactionsMapping"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint
      ] & {
        nrid: bigint;
        participantWallet: string;
        pan: bigint;
        mcc: bigint;
        authorizedAt: bigint;
        settledAt: bigint;
        paymentGeneratedAt: bigint;
        productBin: bigint;
        saleValue: bigint;
        status: bigint;
        participantType: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
