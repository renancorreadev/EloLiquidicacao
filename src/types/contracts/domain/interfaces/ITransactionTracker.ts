/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ITransactionTrackerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTransactionInfo"
      | "getTransactionsByParticipant"
      | "getTransactionsByStatus"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTransactionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByStatus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransactionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByStatus",
    data: BytesLike
  ): Result;
}

export interface ITransactionTracker extends BaseContract {
  connect(runner?: ContractRunner | null): ITransactionTracker;
  waitForDeployment(): Promise<this>;

  interface: ITransactionTrackerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTransactionInfo: TypedContractMethod<
    [nrid: BigNumberish],
    [string],
    "view"
  >;

  getTransactionsByParticipant: TypedContractMethod<
    [participantWallet: AddressLike],
    [string[]],
    "view"
  >;

  getTransactionsByStatus: TypedContractMethod<
    [status: BigNumberish],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTransactionInfo"
  ): TypedContractMethod<[nrid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByParticipant"
  ): TypedContractMethod<[participantWallet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByStatus"
  ): TypedContractMethod<[status: BigNumberish], [string[]], "view">;

  filters: {};
}
