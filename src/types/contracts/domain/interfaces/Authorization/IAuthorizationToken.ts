/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface IAuthorizationTokenInterface extends Interface {
  getFunction(nameOrSignature: "mintAuthorizationToken"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "AuthorityTokenBurned" | "AuthorityTokenMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "mintAuthorizationToken",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintAuthorizationToken",
    data: BytesLike
  ): Result;
}

export namespace AuthorityTokenBurnedEvent {
  export type InputTuple = [
    nrid: BigNumberish,
    date: BigNumberish,
    participantType: string,
    participant: AddressLike
  ];
  export type OutputTuple = [
    nrid: bigint,
    date: bigint,
    participantType: string,
    participant: string
  ];
  export interface OutputObject {
    nrid: bigint;
    date: bigint;
    participantType: string;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AuthorityTokenMintedEvent {
  export type InputTuple = [
    nrid: BigNumberish,
    date: BigNumberish,
    participantType: string,
    participant: AddressLike
  ];
  export type OutputTuple = [
    nrid: bigint,
    date: bigint,
    participantType: string,
    participant: string
  ];
  export interface OutputObject {
    nrid: bigint;
    date: bigint;
    participantType: string;
    participant: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAuthorizationToken extends BaseContract {
  connect(runner?: ContractRunner | null): IAuthorizationToken;
  waitForDeployment(): Promise<this>;

  interface: IAuthorizationTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mintAuthorizationToken: TypedContractMethod<
    [
      nrid: BigNumberish,
      pan: BigNumberish,
      mcc: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mintAuthorizationToken"
  ): TypedContractMethod<
    [
      nrid: BigNumberish,
      pan: BigNumberish,
      mcc: BigNumberish,
      productBin: BigNumberish,
      saleValue: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AuthorityTokenBurned"
  ): TypedContractEvent<
    AuthorityTokenBurnedEvent.InputTuple,
    AuthorityTokenBurnedEvent.OutputTuple,
    AuthorityTokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "AuthorityTokenMinted"
  ): TypedContractEvent<
    AuthorityTokenMintedEvent.InputTuple,
    AuthorityTokenMintedEvent.OutputTuple,
    AuthorityTokenMintedEvent.OutputObject
  >;

  filters: {
    "AuthorityTokenBurned(uint256,uint256,string,address)": TypedContractEvent<
      AuthorityTokenBurnedEvent.InputTuple,
      AuthorityTokenBurnedEvent.OutputTuple,
      AuthorityTokenBurnedEvent.OutputObject
    >;
    AuthorityTokenBurned: TypedContractEvent<
      AuthorityTokenBurnedEvent.InputTuple,
      AuthorityTokenBurnedEvent.OutputTuple,
      AuthorityTokenBurnedEvent.OutputObject
    >;

    "AuthorityTokenMinted(uint256,uint256,string,address)": TypedContractEvent<
      AuthorityTokenMintedEvent.InputTuple,
      AuthorityTokenMintedEvent.OutputTuple,
      AuthorityTokenMintedEvent.OutputObject
    >;
    AuthorityTokenMinted: TypedContractEvent<
      AuthorityTokenMintedEvent.InputTuple,
      AuthorityTokenMintedEvent.OutputTuple,
      AuthorityTokenMintedEvent.OutputObject
    >;
  };
}
