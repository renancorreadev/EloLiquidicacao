/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IManagementCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addParticipant"
      | "getParticipantInfo"
      | "getTransactionInfo"
      | "getTransactionsByParticipant"
      | "getTransactionsByStatus"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ParticipantAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "addParticipant",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getParticipantInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByParticipant",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionsByStatus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParticipantInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByParticipant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionsByStatus",
    data: BytesLike
  ): Result;
}

export namespace ParticipantAddedEvent {
  export type InputTuple = [
    participantWallet: AddressLike,
    participantType: string
  ];
  export type OutputTuple = [
    participantWallet: string,
    participantType: string
  ];
  export interface OutputObject {
    participantWallet: string;
    participantType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IManagementCore extends BaseContract {
  connect(runner?: ContractRunner | null): IManagementCore;
  waitForDeployment(): Promise<this>;

  interface: IManagementCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addParticipant: TypedContractMethod<
    [participantWallet: AddressLike, participantType: string],
    [void],
    "nonpayable"
  >;

  getParticipantInfo: TypedContractMethod<
    [participantAddress: AddressLike],
    [string],
    "view"
  >;

  getTransactionInfo: TypedContractMethod<
    [nrid: BigNumberish],
    [string],
    "view"
  >;

  getTransactionsByParticipant: TypedContractMethod<
    [participantWallet: AddressLike],
    [string[]],
    "view"
  >;

  getTransactionsByStatus: TypedContractMethod<
    [status: BigNumberish],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addParticipant"
  ): TypedContractMethod<
    [participantWallet: AddressLike, participantType: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getParticipantInfo"
  ): TypedContractMethod<[participantAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTransactionInfo"
  ): TypedContractMethod<[nrid: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByParticipant"
  ): TypedContractMethod<[participantWallet: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTransactionsByStatus"
  ): TypedContractMethod<[status: BigNumberish], [string[]], "view">;

  getEvent(
    key: "ParticipantAdded"
  ): TypedContractEvent<
    ParticipantAddedEvent.InputTuple,
    ParticipantAddedEvent.OutputTuple,
    ParticipantAddedEvent.OutputObject
  >;

  filters: {
    "ParticipantAdded(address,string)": TypedContractEvent<
      ParticipantAddedEvent.InputTuple,
      ParticipantAddedEvent.OutputTuple,
      ParticipantAddedEvent.OutputObject
    >;
    ParticipantAdded: TypedContractEvent<
      ParticipantAddedEvent.InputTuple,
      ParticipantAddedEvent.OutputTuple,
      ParticipantAddedEvent.OutputObject
    >;
  };
}
