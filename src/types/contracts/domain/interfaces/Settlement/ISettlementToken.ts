/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../common";

export interface ISettlementTokenInterface extends Interface {
  getFunction(nameOrSignature: "mintSettlementToken"): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AuthorizationStatusUpdated"
      | "SettlementTokenBurned"
      | "SettlementTokenMinted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "mintSettlementToken",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "mintSettlementToken",
    data: BytesLike
  ): Result;
}

export namespace AuthorizationStatusUpdatedEvent {
  export type InputTuple = [
    nrid: BigNumberish,
    date: BigNumberish,
    status: string,
    burned: boolean
  ];
  export type OutputTuple = [
    nrid: bigint,
    date: bigint,
    status: string,
    burned: boolean
  ];
  export interface OutputObject {
    nrid: bigint;
    date: bigint;
    status: string;
    burned: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementTokenBurnedEvent {
  export type InputTuple = [nrid: BigNumberish, date: BigNumberish];
  export type OutputTuple = [nrid: bigint, date: bigint];
  export interface OutputObject {
    nrid: bigint;
    date: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlementTokenMintedEvent {
  export type InputTuple = [
    nrid: BigNumberish,
    date: BigNumberish,
    participantType: string
  ];
  export type OutputTuple = [
    nrid: bigint,
    date: bigint,
    participantType: string
  ];
  export interface OutputObject {
    nrid: bigint;
    date: bigint;
    participantType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISettlementToken extends BaseContract {
  connect(runner?: ContractRunner | null): ISettlementToken;
  waitForDeployment(): Promise<this>;

  interface: ISettlementTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  mintSettlementToken: TypedContractMethod<
    [nrid: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "mintSettlementToken"
  ): TypedContractMethod<[nrid: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AuthorizationStatusUpdated"
  ): TypedContractEvent<
    AuthorizationStatusUpdatedEvent.InputTuple,
    AuthorizationStatusUpdatedEvent.OutputTuple,
    AuthorizationStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementTokenBurned"
  ): TypedContractEvent<
    SettlementTokenBurnedEvent.InputTuple,
    SettlementTokenBurnedEvent.OutputTuple,
    SettlementTokenBurnedEvent.OutputObject
  >;
  getEvent(
    key: "SettlementTokenMinted"
  ): TypedContractEvent<
    SettlementTokenMintedEvent.InputTuple,
    SettlementTokenMintedEvent.OutputTuple,
    SettlementTokenMintedEvent.OutputObject
  >;

  filters: {
    "AuthorizationStatusUpdated(uint256,uint256,string,bool)": TypedContractEvent<
      AuthorizationStatusUpdatedEvent.InputTuple,
      AuthorizationStatusUpdatedEvent.OutputTuple,
      AuthorizationStatusUpdatedEvent.OutputObject
    >;
    AuthorizationStatusUpdated: TypedContractEvent<
      AuthorizationStatusUpdatedEvent.InputTuple,
      AuthorizationStatusUpdatedEvent.OutputTuple,
      AuthorizationStatusUpdatedEvent.OutputObject
    >;

    "SettlementTokenBurned(uint256,uint256)": TypedContractEvent<
      SettlementTokenBurnedEvent.InputTuple,
      SettlementTokenBurnedEvent.OutputTuple,
      SettlementTokenBurnedEvent.OutputObject
    >;
    SettlementTokenBurned: TypedContractEvent<
      SettlementTokenBurnedEvent.InputTuple,
      SettlementTokenBurnedEvent.OutputTuple,
      SettlementTokenBurnedEvent.OutputObject
    >;

    "SettlementTokenMinted(uint256,uint256,string)": TypedContractEvent<
      SettlementTokenMintedEvent.InputTuple,
      SettlementTokenMintedEvent.OutputTuple,
      SettlementTokenMintedEvent.OutputObject
    >;
    SettlementTokenMinted: TypedContractEvent<
      SettlementTokenMintedEvent.InputTuple,
      SettlementTokenMintedEvent.OutputTuple,
      SettlementTokenMintedEvent.OutputObject
    >;
  };
}
